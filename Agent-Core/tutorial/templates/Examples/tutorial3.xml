<!-- All used information states 
	$dialoguestates.initialized 			Useful for initializing information state in the beginning

	$util.timestamp.now 					Current time for reference

	$amq.ssi.face.emotion.happiness			Current read happiness level of the user by SSI (Double [0-1])

	$userstates								Information States root of the user
	$userstates.emotion.valence 			Valence level recognized by both audio and video (Double [0-1])

	$agentstates 							Information States root of the agent
	$agentstates.intents 					List of all intents of the agent
	$agentstates.jokes 						List of all jokes told by the agent
	$agentstates.utterance.ts 				Timestamp of the current utterance of the agent
	$agentstates.utterance.value 			The full String of what is said by the agent

FML-templates:
	See /data/fmltemplates
-->


<behaviourtemplates xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://github.com/hmi-utwente/FlipperMMDS C:\Users\hmi\Documents\GIT\ARIA-DialogueManagement\dist\data\template.xsd">
	<template id="initialize" name="initializeInformationState">
		<preconditions>
			<compare value1="$dialoguestates.initialized" comparator="not_exists"/>
		</preconditions>
		<effects>
			<update name="$dialoguestates.initialized" value="true"/>
			<update name="$agentstates.intents._addfirst" value=" "/>
			<update name="$agentstates.jokes._addfirst" value=" "/>
			<update name="$agentstates.utterance.ts" value="$util.timestamp.now"/>
		</effects>
	</template>

	<template id="joking" name="crackSomeJokes">
		<preconditions>
			<compare value1="$agentstates.intents._first" comparator="not_equals" value2="askedJokeQuestion"/>
			<!-- indicator compares to a weighted if statement (refer to the flipper documentation): if (startvalue == endvalue) indicator = true  -->
			<indicator startvalue="0" comparator="greater_equals" endvalue="2">
				<!-- if we told no joke: if previous (_first) intent was no joke made (" "), startvalue +2 -->
				<icompare value1="$agentstates.intents._first" value2=" " modifier="+2"/>
				<!-- if we told a good joke: if previous (_first) intent was give feedback on good joke ("feedbackGoodJoke"), startvalue +1 -->
				<icompare value1="$agentstates.intents._first" value2="feedbackGoodJoke" modifier="+1"/>
				<!-- if we told a bad joke: if previous (_first) intent was give feedback on bad joke ("feedbackBadJoke"), startvalue +1 -->
				<icompare value1="$agentstates.intents._first" value2="feedbackBadJoke" modifier="+1"/>
				<!-- if the previous agent utterance was less than 10000ms, startvalue +1 -->
				<icompare value1="$agentstates.utterance.ts" comparator="smaller_than" value2="$util.timestamp.now-10000" modifier="+1"/>				
			</indicator>
		</preconditions>
		<effects>
			<!-- -->
			<update name="$agentstates.intents._addfirst" value="askedJokeQuestion"/>
			<update name="$agentstates.utterance.ts" value="$util.timestamp.now"/>
			<remove name="$agentstates.intents._last"/>
		</effects>
		<!-- in an optional different types of behaviour can be defined for one set of preconditions -->
		<optional>
			<!-- select and tell random joke: option defines probability (total should be 1) -->
			<option probability="0.3">
				<!-- when we call effects during an option we need a c_ prefix (stands for choice) -->
				<c_effects>
					<!-- the joke is always in two parts, some starter and then the punchline: first the starter -->
					<c_update name="$agentstates.utterance.value" value="How do you kill a vegetarian vampire?"/>
					<!-- keep in a list which starter we told (needed to tell the right punchline) -->
					<c_update name="$agentstates.jokes._addfirst" value="one"/>
				</c_effects>
				<!-- we can also call a behaviour class during an option. note, this needs a c_ prefix (stands for choice) -->
				<c_behaviour class="eu.aria.dialogue.behaviours.FMLGenerator">
					<c_argument name="template" value="inform_statement_y_02"/>
					<c_argument name="var.var1" value="$agentstates.utterance.value"/>
					<!-- emotion is set to tention -->
					<c_argument name="em1.type" value="tension"/>
					<c_argument name="fallback" value="$agentstates.utterance.value"/>
				</c_behaviour>
			</option>
			<option probability="0.3">
				<c_effects>
					<c_update name="$agentstates.utterance.value" value="I thought the brain was the most important organ..."/>
					<c_update name="$agentstates.jokes._addfirst" value="two"/>
				</c_effects>
				<c_behaviour class="eu.aria.dialogue.behaviours.FMLGenerator">
					<c_argument name="template" value="inform_statement_y_02"/>
					<c_argument name="var.var1" value="$agentstates.utterance.value"/>
					<c_argument name="em1.type" value="tension"/>
					<c_argument name="fallback" value="$agentstates.utterance.value"/>
				</c_behaviour>
			</option>
			<option probability="0.4">
				<c_effects>
					<c_update name="$agentstates.utterance.value" value="Why don’t you ever see hippopotamus hiding in trees?"/>
					<c_update name="$agentstates.jokes._addfirst" value="three"/>
				</c_effects>
				<c_behaviour class="eu.aria.dialogue.behaviours.FMLGenerator">
					<c_argument name="template" value="inform_statement_y_02"/>
					<c_argument name="var.var1" value="$agentstates.utterance.value"/>
					<c_argument name="em1.type" value="tension"/>
					<c_argument name="fallback" value="$agentstates.utterance.value"/>
				</c_behaviour>
			</option>
		</optional>
		
	</template>

	<!-- here we wait for the user to think, and tell the punchline for joke 1 -->
	<template id="punchLineID1" name="Let user think and punch the joke">
		<preconditions>
			<!-- is a joke started -->
			<compare value1="$agentstates.intents._first" value2="askedJokeQuestion"/>
			<!-- is it the joke one -->
			<compare value1="$agentstates.jokes._first" value2="one"/>
			<!-- did we wait for some time between the starter joke and the punchline -->
			<compare value1="$agentstates.utterance.ts" comparator="smaller_than" value2="$util.timestamp.now-5000"/>
		</preconditions>
		<effects>
			<!-- update that we told the punchline -->
			<update name="$agentstates.intents._addfirst" value="toldPunchLine"/>
			<!-- the punchline -->
			<update name="$agentstates.utterance.value" value="A steak to the heart."/>
			<!-- timestamp of when we said something -->
			<update name="$agentstates.utterance.ts" value="$util.timestamp.now"/>
		</effects>
		<behaviour class="eu.aria.dialogue.behaviours.FMLGenerator">
			<argument name="template" value="inform_statement_y_02"/>
			<argument name="var.var1" value="$agentstates.utterance.value"/>
			<argument name="em1.type" value="joy"/>
			<argument name="fallback" value="$agentstates.utterance.value"/>
		</behaviour>
	</template>

	<!-- punch line 2 -->
	<template id="punchLineID2" name="Let user think and punch the joke">
		<preconditions>
			<compare value1="$agentstates.intents._first" value2="askedJokeQuestion"/>
			<compare value1="$agentstates.jokes._first" value2="two"/>
			<compare value1="$agentstates.utterance.ts" comparator="smaller_than" value2="$util.timestamp.now-5000"/>
		</preconditions>
		<effects>
			<update name="$agentstates.intents._addfirst" value="toldPunchLine"/>
			<update name="$agentstates.utterance.value" value="but then I thought, who is telling me that!"/>
			<update name="$agentstates.utterance.ts" value="$util.timestamp.now"/>
		</effects>
		<behaviour class="eu.aria.dialogue.behaviours.FMLGenerator">
			<argument name="template" value="inform_statement_y_02"/>
			<argument name="var.var1" value="$agentstates.utterance.value"/>
			<argument name="em1.type" value="joy"/>
			<argument name="fallback" value="$agentstates.utterance.value"/>
		</behaviour>
	</template>

	<!-- punch line 3 -->
	<template id="punchLineID3" name="Let user think and punch the joke">
		<preconditions>
			<compare value1="$agentstates.intents._first" value2="askedJokeQuestion"/>
			<compare value1="$agentstates.jokes._first" value2="three"/>
			<compare value1="$agentstates.utterance.ts" comparator="smaller_than" value2="$util.timestamp.now-5000"/>
		</preconditions>
		<effects>
			<update name="$agentstates.intents._addfirst" value="toldPunchLine"/>
			<update name="$agentstates.utterance.value" value="Because they’re really good at it."/>
			<update name="$agentstates.utterance.ts" value="$util.timestamp.now"/>
		</effects>
		<behaviour class="eu.aria.dialogue.behaviours.FMLGenerator">
			<argument name="template" value="inform_statement_y_02"/>
			<argument name="var.var1" value="$agentstates.utterance.value"/>
			<argument name="em1.type" value="joy"/>
			<argument name="fallback" value="$agentstates.utterance.value"/>
		</behaviour>
	</template>

	<!-- reaction to a smiling user after a joke -->
	<template id="agentstates-001" name="React to laughing">
		<preconditions>
			<!-- from SSI if the user seems happier than some value -->
			<compare value1="$amq.ssi.face.emotion.happiness" comparator="greater_equals" value2="0.8"/>
			<!-- again a timer to not comment right away after telling a joke -->
			<compare value1="$agentstates.utterance.ts" comparator="smaller_than" value2="$util.timestamp.now-5000"/>
			<!-- did we really tell the joke? -->
			<compare value1="$agentstates.intents._first" value2="toldPunchLine"/>
		</preconditions>
		<effects>			
			<update name="$agentstates.utterance.value" value="Good joke, made you laugh!"/>
			<update name="$agentstates.utterance.ts" value="$util.timestamp.now"/>
			<update name="$agentstates.intents._addfirst" value="feedbackGoodJoke"/>
		</effects>
		<behaviour class="eu.aria.dialogue.behaviours.FMLGenerator">
			<argument name="template" value="inform_statement_y_02"/>
			<argument name="alt.inform" value="1"/>
			<argument name="var.var1" value="$agentstates.utterance.value"/>
			<argument name="em1.type" value="happy"/>
			<argument name="fallback" value="$agentstates.utterance.value"/>
		</behaviour>
	</template>

	<!-- reaction to a user not smiling after a joke -->
	<template id="agentstates-002" name="React to not laughing">
		<preconditions>
			<compare value1="$amq.ssi.face.emotion.happiness" comparator="smaller_than" value2="0.7"/>
			<compare value1="$agentstates.utterance.ts" comparator="smaller_than" value2="$util.timestamp.now-5000"/>
			<compare value1="$agentstates.intents._first" value2="toldPunchLine"/>
		</preconditions>
		<effects>			
			<update name="$agentstates.utterance.value" value="Sorry, not funny?"/>
			<update name="$agentstates.utterance.ts" value="$util.timestamp.now"/>
			<update name="$agentstates.intents._addfirst" value="feedbackBadJoke"/>
		</effects>
		<behaviour class="eu.aria.dialogue.behaviours.FMLGenerator">
			<argument name="template" value="inform_statement_y_02"/>
			<argument name="alt.inform" value="1"/>
			<argument name="var.var1" value="$agentstates.utterance.value"/>
			<argument name="em1.type" value="disappointment"/>
			<argument name="fallback" value="$agentstates.utterance.value"/>
		</behaviour>
	</template>

</behaviourtemplates>