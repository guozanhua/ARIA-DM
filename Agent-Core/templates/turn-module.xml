<!-- 
This file manages the user turns based on the volum level found

Template Dependencies:
	util-timestamp.xml
Dependent Managers: 
	eu.aria.flipper.behaviours.AMQ
Dependent Behaviours:
	<none>
Dependent Functions:
	<none>
IS-Vars:
	$providers.amq.ssi.emax.presence
	$userstates.presence.value
	$userstates.presence.last.ts
	$userstates.presence.last.consumers
	$userstates.presence.change.ts
	$userstates.presence.change.consumers
	$util.timestamp.now
-Static
	<none>
-Winger-Input:
	<none>
-Winger-Output:
	<none>
Schema files: 
	opening-sequence.png
-->

<behaviourtemplates xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="C:\Users\Siewart\Documents\HMI\Flipper\target\classes\ C:\Users\Siewart\Documents\HMI\Flipper\target\classes\template.xsd">
        
    <template id="turn_000a" name="Reset Turn">
        <preconditions>
            <compare value1="$dialoguestates.turn.owner" comparator="not_exists"/>
        </preconditions>
        <effects>
            <update name="$dialoguestates.turn.owner" value="null"/>
        </effects>
    </template>
    
    <template id="turn_000b" name="Reset Turn">
        <preconditions>
            <compare value1="$userstates.is_talking" comparator="not_exists"/>
        </preconditions>
        <effects>
            <update name="$userstates.is_talking" value="false"/>
        </effects>
    </template>
    
    <template id="turn_000c" name="Reset Turn">
        <preconditions>
            <compare value1="$agentstates.is_talking" comparator="not_exists"/>
        </preconditions>
        <effects>
            <update name="$agentstates.is_talking" value="false"/>
        </effects>
    </template>
    
	<!-- If no one is talking or wants the turn, make it available -->
	<template id="turn_001" name="Make Turn Available">
		<preconditions>
			<compare value1="$dialoguestates.turn.owner" comparator="not_equals" value2="null"/>
			<compare value1="$userstates.is_talking" value2="false" />
			<compare value1="$agentstates.is_talking" value2="false" />
		</preconditions>
		<effects>
			<update name="$dialoguestates.turn.owner" value="null"/>
			<!--<update name="$debug" value="@{print('Reset Turn at ' + Date.now() ); 1;}"/>-->
		</effects>
	</template> 

	<!-- If the agent wants the turn, and the user is not talking, give him the turn -->
	<template id="turn_002" name="Assign turn to Agent">
		<preconditions>
            <!-- DEBUG WITH ME: <compare value1="1" value2="@{print('checking turn002'); 1;}"/> -->
			<compare value1="$dialoguestates.turn.owner" value2="null"/>
			<compare value1="$userstates.is_talking" value2="false"/>
			<compare value1="$agentstates.turn.want" value2="true"/>
		</preconditions>
		<effects>
			<update name="$dialoguestates.turn.owner" value="agent"/>
            <update name="$agentstates.turn.want" value="false"/>
            <!--<update name="$debug" value="@{print('Giving Turn to Agent at ' + Date.now() ); 1;}"/>-->
		</effects>
	</template>

	<!-- If the agent wants to keep the turn and the user is not talking, give agent the turn -->
	<template id="turn_003" name="Keep turn to Agent">
		<preconditions>
			<compare value1="$dialoguestates.turn.owner" value2="null"/>
			<compare value1="$userstates.is_talking" value2="false"/>
			<compare value1="$agentstates.turn.keep" value2="true"/>
		</preconditions>
		<effects>
			<update name="$agentstates.turn.keep" value="false"/>
			<update name="$dialoguestates.turn.owner" value="agent"/>
			<!-- <update name="$debug" value="@{print('Keeping Turn to User at ' + Date.now() ); 1;}"/> -->
		</effects>
	</template>

	<!-- If the user is talking and the agent is not talking give user the turn -->
	<template id="turn_004" name="Assign turn to User">
		<preconditions>
			<compare value1="$dialoguestates.turn.owner" value2="null"/>
			<compare value1="$userstates.is_talking" value2="true"/>
			<compare value1="$agentstates.is_talking" value2="false"/>
		</preconditions>
		<effects>
			<update name="$dialoguestates.turn.owner" value="user"/>
			<!-- <update name="$debug" value="@{print('Giving to User at ' + Date.now() ); 1;}"/> -->
		</effects>
	</template>
		<!-- Agent wants turn if available -->
	<template id="turn_005" name="Want Turn Agent">
		<preconditions>
			<compare value1="$userstates.intent.function" comparator="exists"/>
			<indicator startvalue="0" endvalue="1" comparator="greater_equals">
				<icompare value1="$agentstates.is_talking" value2="false" modifier="+1"/>
				<icompare value1="$agentstates.turn.keep" value2="true" modifier="+1"/>
			</indicator>
		</preconditions>
		<effects>
			<update name="$agentstates.turn.want" value="true"/>
			<update name="$agentstates.turn.keep" value="false"/>
			<!--<update name="$debug" value="@{print('Reset Turn at ' + Date.now() ); 1;}"/>-->
		</effects>
	</template> 
</behaviourtemplates>